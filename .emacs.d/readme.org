* Emacs General Config
** Interface tweaks
#+BEGIN_SRC emacs-lisp
  ;; Do not show message at startup
  (setq inhibit-startup-message t)

  ;; Hide Toolbar
  (tool-bar-mode -1)

  ;; Simplify confirmation
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Reload buffer
  (global-set-key (kbd "<f5>") 'revert-buffer)

  ;; Show Line Numbers
  (global-linum-mode t)

  (setq visible-bell 1)

  ;; Hide Menu Bar
  (menu-bar-mode -1)

  ;; Hide Scroll Bar
  (toggle-scroll-bar -1)

  ;; Fix unicode errors
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  (setenv "LC_CTYPE" "en_US.UTF-8")
#+END_SRC
** Better defaults
#+BEGIN_SRC emacs-lisp
  ;; No message in scratch buffer
  (setq initial-scratch-message nil)

  ;; Show matching parens
  (setq show-paren-delay 0)
  (show-paren-mode 1)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Wrap lines at 80 characters wide, not 72
  (setq fill-column 80)

  ;; Change Cursor
  (setq-default cursor-type 'box)
  (blink-cursor-mode -1)
  
  ;; Write backup files to their own directory
  (setq backup-directory-alist
	`(("." . ,(expand-file-name
		   (concat user-emacs-directory "backups")))))

  ;; Don't write lock-files, I'm the only one here
  (setq create-lockfiles nil)

  ;; Show a marker when the line has empty characters at the end
  (setq-default show-trailing-whitespace t)
#+END_SRC
** Improvements
#+BEGIN_SRC emacs-lisp
  ;; Window Navigation
  (bind-key "M-o" 'other-window)

  ;; Window resizing
  (bind-key "M-s-<left>" 'shrink-window-horizontally)
  (bind-key "M-s-<right>" 'enlarge-window-horizontally)
  (bind-key "M-s-<down>" 'shrink-window)
  (bind-key "M-s-<up>" 'enlarge-window)

  ;; Window splitting
  (bind-key "M-0" 'delete-window)
  (bind-key "M-1" 'delete-other-windows)
  (bind-key "M-2" 'split-window-vertically)
  (bind-key "M-3" 'split-window-horizontally)
  (bind-key "M-=" 'balance-windows)

  ;; Navigate through buffers
  (global-set-key (kbd "M-[") 'previous-buffer)
  (global-set-key (kbd "M-]") 'next-buffer)

  ;; Set font size
  (global-set-key (kbd "C-x -") 'my/decrease-font-height)
  (global-set-key (kbd "C-x =") 'my/increase-font-height)
  (global-set-key (kbd "C-x +") 'my/increase-font-height)

  ;; Set EOL
  (setq require-final-newline t)
#+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox t))
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
      :ensure t
      :config
      (which-key-mode))
#+END_SRC
* Ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default
#+END_SRC
* Swiper/ivy/counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

  (use-package avy
    :ensure t
    :bind ("C-:" . avy-goto-char))
#+END_SRC
* Exec path
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC
* Undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
#+END_SRC
* Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))

  ;; (use-package projectile
  ;;   :ensure t
  ;;   :delight '(:eval (format "Proj[%s]" (projectile-project-name)))
  ;;   :custom
  ;;   (projectile-keymap-prefix (kbd "C-c p"))
  ;;   (projectile-switch-project-action 'helm-ls-git-ls)
  ;;   (projectile-completion-system 'helm)
  ;;   :hook
  ;;   (after-init . projectile-mode))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :ensure t
      :hook ((prog-mode . yas-minor-mode)
	     (conf-mode . yas-minor-mode)
	     (text-mode . yas-minor-mode)
	     (snippet-mode . yas-minor-mode)))

    (use-package yasnippet-snippets
      :ensure t
      :after (yasnippet))
#+END_SRC
* Elixir
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :ensure t)
#+END_SRC
* Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :custom
    (web-mode-enable-current-element-highlight t)
    (web-mode-enable-current-column-highlight t)
    :mode ("\\.html\\'" "\\.php\\'" "\\.vue\\'" "\\.html.eex\\'" "\\.html.leex\\'")
    :config
    (add-to-list 'web-mode-comment-formats '("javascript" . "//"))
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-style-padding 0)
    (setq web-mode-script-padding 0))
#+END_SRC
* Emmet Mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :commands (emmet-expand-line emmet-expand)
    :bind (:map emmet-mode-keymap
		("C-j" . emmet-expand-line)
		("<C-return>" . emmet-expand))
    :config
    (setq emmet-indentation 2)
    (defadvice emmet-preview-accept (after expand-and-fontify activate)
      "Update the font-face after an emmet expantion."
      (font-lock-flush))
    :hook ((sgml-mode . emmet-mode)
	   (web-mode . emmet-mode)
	   (css-mode . emmet-mode)))
#+END_SRC
* CSS
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :mode ("\\css\\'" "\\.scss\\'" "\\.sass\\'")
    :config
    (setq css-indent-offset 2))
#+END_SRC
* Write room
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :ensure t)
#+END_SRC

* JS
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . js-jsx-mode))
  (add-hook 'js-jsx-mode 'web-mode)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  ;; set maximum indentation for description lists
  (setq org-list-description-max-indent 5)

  ;; prevent demoting heading also shifting text inside sections
  (setq org-adapt-indentation nil)


  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)

  (setq org-log-done t)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (add-hook 'org-mode-hook (lambda () (visual-line-mode 1))))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
